import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import axios from 'axios';
import './App.css';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';

function App() {
  const [socket, setSocket] = useState(null);
  const [connected, setConnected] = useState(false);
  const [agents, setAgents] = useState([]);
  const [selectedAgent, setSelectedAgent] = useState(null);
  const [systemInfo, setSystemInfo] = useState(null);
  const [programPath, setProgramPath] = useState('');
  const [programArgs, setProgramArgs] = useState('');
  const [status, setStatus] = useState('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
  const [logs, setLogs] = useState([]);

  useEffect(() => {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    const newSocket = io(API_BASE_URL);
    setSocket(newSocket);

    // Event listeners
    newSocket.on('connect', () => {
      setConnected(true);
      setStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      addLog('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
      
      // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Client
      newSocket.emit('register-client', {
        userAgent: navigator.userAgent
      });
      
      // ‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Agents
      newSocket.emit('get-agent-list');
    });

    newSocket.on('disconnect', () => {
      setConnected(false);
      setStatus('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢');
      addLog('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢', 'error');
    });

    newSocket.on('agent-list-updated', (data) => {
      setAgents(data.agents || []);
      addLog(`‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${data.agents?.length || 0} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á`, 'info');
    });

    newSocket.on('program-launched', (data) => {
      addLog(`‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.program}`, 'success');
    });

    newSocket.on('program-launch-error', (data) => {
      addLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ: ${data.error}`, 'error');
    });

    newSocket.on('system-control-success', (data) => {
      addLog(`‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.message}`, 'success');
    });

    newSocket.on('system-control-error', (data) => {
      addLog(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.error}`, 'error');
    });

    newSocket.on('system-info', (data) => {
      setSystemInfo(data);
      addLog('üìä ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö', 'info');
    });

    return () => {
      newSocket.close();
    };
  }, []);

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  const refreshAgentList = () => {
    if (socket && connected) {
      socket.emit('get-agent-list');
      addLog('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', 'info');
    }
  };

  const launchProgram = async () => {
    if (!selectedAgent) {
      addLog('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°', 'error');
      return;
    }

    if (!programPath.trim()) {
      addLog('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°', 'error');
      return;
    }

    const args = programArgs.split(' ').filter(arg => arg.trim());
    
    try {
      const response = await axios.post(
        `${API_BASE_URL}/api/agent/${selectedAgent.agentId}/launch-program`,
        {
          programPath: programPath.trim(),
          arguments: args
        }
      );
      
      addLog(`üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${selectedAgent.agentName}`, 'info');
    } catch (error) {
      addLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${error.message}`, 'error');
    }
  };

  const systemControl = async (action) => {
    if (!selectedAgent) {
      addLog('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°', 'error');
      return;
    }

    try {
      const response = await axios.post(
        `${API_BASE_URL}/api/agent/${selectedAgent.agentId}/system-control`,
        { action }
      );
      
      addLog(`üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${action} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${selectedAgent.agentName}`, 'info');
    } catch (error) {
      addLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${error.message}`, 'error');
    }
  };

  const getSystemInfo = async () => {
    if (!selectedAgent) {
      addLog('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
      return;
    }

    try {
      await axios.get(`${API_BASE_URL}/api/agent/${selectedAgent.agentId}/system-info`);
      addLog(`üì§ ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å ${selectedAgent.agentName}`, 'info');
    } catch (error) {
      addLog(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error.message}`, 'error');
    }
  };

  const clearLogs = () => {
    setLogs([]);
  };

  const getPlatformIcon = (platform) => {
    switch (platform) {
      case 'win32': return 'ü™ü';
      case 'darwin': return 'üçé';
      case 'linux': return 'üêß';
      default: return 'üñ•Ô∏è';
    }
  };

  const getProgramPlaceholder = () => {
    if (!selectedAgent) return '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô...';
    
    switch (selectedAgent.platform) {
      case 'win32':
        return 'C:\\Program Files\\Notepad++\\notepad++.exe';
      case 'darwin':
        return '/Applications/Calculator.app';
      case 'linux':
        return '/usr/bin/firefox';
      default:
        return '‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°';
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>üåê Remote Computer Control Center</h1>
        <p>‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</p>
        
        <div className={`status-indicator ${connected ? 'connected' : 'disconnected'}`}>
          <span className="status-dot"></span>
          {status}
        </div>
      </header>

      <main className="main-content">
        <div className="control-panel">
          {/* Agent Selection */}
          <div className="section">
            <div className="section-header">
              <h2>üñ•Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°</h2>
              <button onClick={refreshAgentList} className="btn btn-secondary btn-sm">
                üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
              </button>
            </div>
            
            {agents.length === 0 ? (
              <div className="no-agents">
                <p>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà</p>
                <p className="hint">‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô Agent ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°</p>
                <code>node agent.js</code>
              </div>
            ) : (
              <div className="agents-grid">
                {agents.map((agent) => (
                  <div
                    key={agent.agentId}
                    className={`agent-card ${selectedAgent?.agentId === agent.agentId ? 'selected' : ''}`}
                    onClick={() => {
                      setSelectedAgent(agent);
                      setSystemInfo(null);
                      addLog(`üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${agent.agentName}`, 'info');
                    }}
                  >
                    <div className="agent-icon">
                      {getPlatformIcon(agent.platform)}
                    </div>
                    <div className="agent-info">
                      <h3>{agent.agentName}</h3>
                      <p className="agent-hostname">{agent.hostname}</p>
                      <p className="agent-platform">{agent.platform} | {agent.arch}</p>
                      <p className="agent-status">
                        <span className="status-dot-small"></span>
                        ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {selectedAgent && (
            <>
              {/* System Info */}
              <div className="section">
                <h2>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö: {selectedAgent.agentName}</h2>
                <button onClick={getSystemInfo} className="btn btn-info">
                  ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
                </button>
                
                {systemInfo && systemInfo.agentId === selectedAgent.agentId && (
                  <div className="system-info">
                    <div className="info-grid">
                      <div className="info-item">
                        <strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£:</strong> {systemInfo.platform}
                      </div>
                      <div className="info-item">
                        <strong>‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°:</strong> {systemInfo.arch}
                      </div>
                      <div className="info-item">
                        <strong>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:</strong> {systemInfo.hostname}
                      </div>
                      <div className="info-item">
                        <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</strong> {Math.floor(systemInfo.uptime / 3600)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                      </div>
                      <div className="info-item">
                        <strong>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥:</strong> {Math.round(systemInfo.freeMemory / 1024 / 1024 / 1024)} GB / {Math.round(systemInfo.totalMemory / 1024 / 1024 / 1024)} GB
                      </div>
                      <div className="info-item">
                        <strong>CPU:</strong> {systemInfo.cpus} cores
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Launch Program */}
              <div className="section">
                <h2>üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏ô {selectedAgent.agentName}</h2>
                <div className="form-group">
                  <label>Path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:</label>
                  <input
                    type="text"
                    value={programPath}
                    onChange={(e) => setProgramPath(e.target.value)}
                    placeholder={getProgramPlaceholder()}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>Arguments (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):</label>
                  <input
                    type="text"
                    value={programArgs}
                    onChange={(e) => setProgramArgs(e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô --new-window"
                    className="form-input"
                  />
                </div>
                <button onClick={launchProgram} className="btn btn-primary">
                  ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
                </button>
              </div>

              {/* System Control */}
              <div className="section">
                <h2>‚öôÔ∏è ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö: {selectedAgent.agentName}</h2>
                <div className="control-buttons">
                  <button 
                    onClick={() => systemControl('lock')} 
                    className="btn btn-warning"
                  >
                    üîí ‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                  </button>
                  <button 
                    onClick={() => systemControl('sleep')} 
                    className="btn btn-warning"
                  >
                    üò¥ ‡∏´‡∏•‡∏±‡∏ö
                  </button>
                  <button 
                    onClick={() => systemControl('restart')} 
                    className="btn btn-danger"
                  >
                    üîÑ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
                  </button>
                  <button 
                    onClick={() => systemControl('shutdown')} 
                    className="btn btn-danger"
                  >
                    ‚èπÔ∏è ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                  </button>
                </div>
              </div>
            </>
          )}
        </div>

        {/* Logs */}
        <div className="logs-section">
          <div className="logs-header">
            <h2>üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h2>
            <button onClick={clearLogs} className="btn btn-secondary btn-sm">
              ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </button>
          </div>
          <div className="logs-container">
            {logs.length === 0 ? (
              <div className="log-item info">
                <span className="log-message">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...</span>
              </div>
            ) : (
              logs.map((log, index) => (
                <div key={index} className={`log-item ${log.type}`}>
                  <span className="log-time">[{log.timestamp}]</span>
                  <span className="log-message">{log.message}</span>
                </div>
              ))
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;
